{
  "abi": [
    {
      "type": "function",
      "name": "estimateRarePrice",
      "inputs": [
        { "name": "_tokenOut", "type": "address", "internalType": "address" },
        {
          "name": "_rareAmountIn",
          "type": "uint128",
          "internalType": "uint128"
        }
      ],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initialize",
      "inputs": [
        { "name": "_stakingPool", "type": "address", "internalType": "address" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "rewardSwap",
      "inputs": [
        { "name": "_tokenOut", "type": "address", "internalType": "address" },
        {
          "name": "_minAmountOut",
          "type": "uint256",
          "internalType": "uint256"
        },
        { "name": "_rareIn", "type": "uint128", "internalType": "uint128" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "RewardAccumulator",
      "inputs": [
        {
          "name": "_msgSender",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_tokenOut",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "_amountOut",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "_rareIn",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    { "type": "error", "name": "CannotSwapRareForRare", "inputs": [] },
    { "type": "error", "name": "InsufficientFunds", "inputs": [] },
    { "type": "error", "name": "ParameterValueTooLow", "inputs": [] },
    { "type": "error", "name": "RarePriceTooLow", "inputs": [] },
    { "type": "error", "name": "Unauthorized", "inputs": [] },
    { "type": "error", "name": "UnsupportedERC20Token", "inputs": [] }
  ],
  "bytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} },
  "deployedBytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} },
  "methodIdentifiers": {
    "estimateRarePrice(address,uint128)": "442471f0",
    "initialize(address)": "c4d66de8",
    "rewardSwap(address,uint256,uint128)": "94a5a29d"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CannotSwapRareForRare\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParameterValueTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RarePriceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedERC20Token\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rareIn\",\"type\":\"uint256\"}],\"name\":\"RewardAccumulator\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_rareAmountIn\",\"type\":\"uint128\"}],\"name\":\"estimateRarePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingPool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_rareIn\",\"type\":\"uint128\"}],\"name\":\"rewardSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"charlescrain\",\"kind\":\"dev\",\"methods\":{\"estimateRarePrice(address,uint128)\":{\"params\":{\"_rareAmountIn\":\"uint128 amount of RARE to trade for the _tokenOut.\",\"_tokenOut\":\"Address of the ERC20 token to be swapped for.\"},\"returns\":{\"_0\":\"uint256 amount of _tokenOut for the _rareAmountIn.\"}},\"rewardSwap(address,uint256,uint128)\":{\"params\":{\"_minAmountOut\":\"Min amount one is willing to receive for the _rareIn.\",\"_rareIn\":\"The amount of RARE one is looking to trade.\",\"_tokenOut\":\"Address of the ERC20 to pay out with. If null address, then uses ETH.\"}}},\"title\":\"IRewardAccumulator\",\"version\":1},\"userdoc\":{\"errors\":{\"CannotSwapRareForRare()\":[{\"notice\":\"Error emitted via {rewardSwap} if _tokenOut is the $RARE address.\"}],\"InsufficientFunds()\":[{\"notice\":\"Error emitted via {rewardSwap} if reward swap doesn't have enough funds to perform the swap.\"}],\"ParameterValueTooLow()\":[{\"notice\":\"Error emitted when a parameter is too low.\"}],\"RarePriceTooLow()\":[{\"notice\":\"Error emitted via {rewardSwap} if the rare price is too low to handle the _minAmountOut requirement.\"}],\"Unauthorized()\":[{\"notice\":\"Error emitted when user doesnt meet the criteria for call.\"}],\"UnsupportedERC20Token()\":[{\"notice\":\"Emitted when an unsupported ERC20 token for reward swapping.\"}]},\"kind\":\"user\",\"methods\":{\"estimateRarePrice(address,uint128)\":{\"notice\":\"Estimate the discounted $RARE price for a given token.\"},\"rewardSwap(address,uint256,uint128)\":{\"notice\":\"Swap RARE for a discounted price on tokens stored\"}},\"notice\":\"The reward accumulator interface containing all functions, events, etc. for accumulating and swapping rewards.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/staking/reward/IRewardAccumulator.sol\":\"IRewardAccumulator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/buffer/=lib/buffer/\",\":@ensdomains/ens-contracts/=lib/ens-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@uniswap/v3-core/=lib/v3-core/contracts/\",\":@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\":@uniswap/v3-periphery/=lib/v3-periphery/contracts/\",\":arachnid/solidity-stringutils/=lib/solidity-stringutils/\",\":ds-test/=lib/ds-test/src/\",\":ensdomains/ens-contracts/=lib/ensdomains/ens-contracts/contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":rareprotocol/assets/=lib/assets/src/\",\":rareprotocol/aux/=src/\",\":royalty-guard/=lib/royalty-guard/src/royalty-guard/\",\":royalty-registry-solidity/=lib/royalty-registry-solidity/contracts/\",\":royalty-registry/=lib/royalty-registry-solidity/contracts/\",\":solmate/=lib/solmate/src/\"],\"viaIR\":true},\"sources\":{\"src/staking/reward/IRewardAccumulator.sol\":{\"keccak256\":\"0xd045a4bade6d3034e6b59d4219c04a9b15cb4be6d1c7ae71c7a9a9c9a3300f42\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76f423cea72076f7646123d43a6b8b580e7a0b4909fa1d9327fd93e691f0aa6d\",\"dweb:/ipfs/QmcoLTHrNrAQfuL3JtEiuceYvhYb9T9w3EqT9XKmRneTrD\"]}},\"version\":1}",
  "metadata": {
    "compiler": { "version": "0.8.18+commit.87f61d96" },
    "language": "Solidity",
    "output": {
      "abi": [
        { "inputs": [], "type": "error", "name": "CannotSwapRareForRare" },
        { "inputs": [], "type": "error", "name": "InsufficientFunds" },
        { "inputs": [], "type": "error", "name": "ParameterValueTooLow" },
        { "inputs": [], "type": "error", "name": "RarePriceTooLow" },
        { "inputs": [], "type": "error", "name": "Unauthorized" },
        { "inputs": [], "type": "error", "name": "UnsupportedERC20Token" },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_msgSender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "_tokenOut",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "_amountOut",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_rareIn",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RewardAccumulator",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "_rareAmountIn",
              "type": "uint128"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "estimateRarePrice",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_stakingPool",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_minAmountOut",
              "type": "uint256"
            },
            { "internalType": "uint128", "name": "_rareIn", "type": "uint128" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "rewardSwap"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "estimateRarePrice(address,uint128)": {
            "params": {
              "_rareAmountIn": "uint128 amount of RARE to trade for the _tokenOut.",
              "_tokenOut": "Address of the ERC20 token to be swapped for."
            },
            "returns": {
              "_0": "uint256 amount of _tokenOut for the _rareAmountIn."
            }
          },
          "rewardSwap(address,uint256,uint128)": {
            "params": {
              "_minAmountOut": "Min amount one is willing to receive for the _rareIn.",
              "_rareIn": "The amount of RARE one is looking to trade.",
              "_tokenOut": "Address of the ERC20 to pay out with. If null address, then uses ETH."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "estimateRarePrice(address,uint128)": {
            "notice": "Estimate the discounted $RARE price for a given token."
          },
          "rewardSwap(address,uint256,uint128)": {
            "notice": "Swap RARE for a discounted price on tokens stored"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@ensdomains/buffer/=lib/buffer/",
        "@ensdomains/ens-contracts/=lib/ens-contracts/contracts/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@uniswap/v3-core/=lib/v3-core/contracts/",
        "@uniswap/v3-core/contracts/=lib/v3-core/contracts/",
        "@uniswap/v3-periphery/=lib/v3-periphery/contracts/",
        "arachnid/solidity-stringutils/=lib/solidity-stringutils/",
        "ds-test/=lib/ds-test/src/",
        "ensdomains/ens-contracts/=lib/ensdomains/ens-contracts/contracts/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        "rareprotocol/assets/=lib/assets/src/",
        "rareprotocol/aux/=src/",
        "royalty-guard/=lib/royalty-guard/src/royalty-guard/",
        "royalty-registry-solidity/=lib/royalty-registry-solidity/contracts/",
        "royalty-registry/=lib/royalty-registry-solidity/contracts/",
        "solmate/=lib/solmate/src/"
      ],
      "optimizer": { "enabled": true, "runs": 200 },
      "metadata": { "bytecodeHash": "ipfs" },
      "compilationTarget": {
        "src/staking/reward/IRewardAccumulator.sol": "IRewardAccumulator"
      },
      "evmVersion": "paris",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "src/staking/reward/IRewardAccumulator.sol": {
        "keccak256": "0xd045a4bade6d3034e6b59d4219c04a9b15cb4be6d1c7ae71c7a9a9c9a3300f42",
        "urls": [
          "bzz-raw://76f423cea72076f7646123d43a6b8b580e7a0b4909fa1d9327fd93e691f0aa6d",
          "dweb:/ipfs/QmcoLTHrNrAQfuL3JtEiuceYvhYb9T9w3EqT9XKmRneTrD"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/staking/reward/IRewardAccumulator.sol",
    "id": 66565,
    "exportedSymbols": { "IRewardAccumulator": [66564] },
    "nodeType": "SourceUnit",
    "src": "32:2914:183",
    "nodes": [
      {
        "id": 66509,
        "nodeType": "PragmaDirective",
        "src": "32:23:183",
        "nodes": [],
        "literals": ["solidity", "^", "0.8", ".0"]
      },
      {
        "id": 66564,
        "nodeType": "ContractDefinition",
        "src": "235:2710:183",
        "nodes": [
          {
            "id": 66520,
            "nodeType": "EventDefinition",
            "src": "464:116:183",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "fde313859edf8a78b1e1c10c6dbe0584a219be6af8d4914fdb85486523103397",
            "name": "RewardAccumulator",
            "nameLocation": "470:17:183",
            "parameters": {
              "id": 66519,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 66512,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_msgSender",
                  "nameLocation": "504:10:183",
                  "nodeType": "VariableDeclaration",
                  "scope": 66520,
                  "src": "488:26:183",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 66511,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "488:7:183",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 66514,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_tokenOut",
                  "nameLocation": "532:9:183",
                  "nodeType": "VariableDeclaration",
                  "scope": 66520,
                  "src": "516:25:183",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 66513,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "516:7:183",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 66516,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_amountOut",
                  "nameLocation": "551:10:183",
                  "nodeType": "VariableDeclaration",
                  "scope": 66520,
                  "src": "543:18:183",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 66515,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "543:7:183",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 66518,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_rareIn",
                  "nameLocation": "571:7:183",
                  "nodeType": "VariableDeclaration",
                  "scope": 66520,
                  "src": "563:15:183",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 66517,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "563:7:183",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "487:92:183"
            }
          },
          {
            "id": 66523,
            "nodeType": "ErrorDefinition",
            "src": "842:29:183",
            "nodes": [],
            "documentation": {
              "id": 66521,
              "nodeType": "StructuredDocumentation",
              "src": "785:54:183",
              "text": "@notice Error emitted when a parameter is too low."
            },
            "errorSelector": "1d01a371",
            "name": "ParameterValueTooLow",
            "nameLocation": "848:20:183",
            "parameters": {
              "id": 66522,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "868:2:183"
            }
          },
          {
            "id": 66526,
            "nodeType": "ErrorDefinition",
            "src": "948:21:183",
            "nodes": [],
            "documentation": {
              "id": 66524,
              "nodeType": "StructuredDocumentation",
              "src": "875:70:183",
              "text": "@notice Error emitted when user doesnt meet the criteria for call."
            },
            "errorSelector": "82b42900",
            "name": "Unauthorized",
            "nameLocation": "954:12:183",
            "parameters": {
              "id": 66525,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "966:2:183"
            }
          },
          {
            "id": 66529,
            "nodeType": "ErrorDefinition",
            "src": "1080:26:183",
            "nodes": [],
            "documentation": {
              "id": 66527,
              "nodeType": "StructuredDocumentation",
              "src": "973:104:183",
              "text": "@notice Error emitted via {rewardSwap} if reward swap doesn't have enough funds to perform the swap."
            },
            "errorSelector": "356680b7",
            "name": "InsufficientFunds",
            "nameLocation": "1086:17:183",
            "parameters": {
              "id": 66528,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1103:2:183"
            }
          },
          {
            "id": 66532,
            "nodeType": "ErrorDefinition",
            "src": "1225:24:183",
            "nodes": [],
            "documentation": {
              "id": 66530,
              "nodeType": "StructuredDocumentation",
              "src": "1110:112:183",
              "text": "@notice Error emitted via {rewardSwap} if the rare price is too low to handle the _minAmountOut requirement."
            },
            "errorSelector": "90981e6d",
            "name": "RarePriceTooLow",
            "nameLocation": "1231:15:183",
            "parameters": {
              "id": 66531,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1246:2:183"
            }
          },
          {
            "id": 66535,
            "nodeType": "ErrorDefinition",
            "src": "1333:30:183",
            "nodes": [],
            "documentation": {
              "id": 66533,
              "nodeType": "StructuredDocumentation",
              "src": "1253:77:183",
              "text": "@notice Error emitted via {rewardSwap} if _tokenOut is the $RARE address."
            },
            "errorSelector": "337b3924",
            "name": "CannotSwapRareForRare",
            "nameLocation": "1339:21:183",
            "parameters": {
              "id": 66534,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1360:2:183"
            }
          },
          {
            "id": 66538,
            "nodeType": "ErrorDefinition",
            "src": "1442:30:183",
            "nodes": [],
            "documentation": {
              "id": 66536,
              "nodeType": "StructuredDocumentation",
              "src": "1367:72:183",
              "text": "@notice Emitted when an unsupported ERC20 token for reward swapping."
            },
            "errorSelector": "2eb084d8",
            "name": "UnsupportedERC20Token",
            "nameLocation": "1448:21:183",
            "parameters": {
              "id": 66537,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1469:2:183"
            }
          },
          {
            "id": 66543,
            "nodeType": "FunctionDefinition",
            "src": "1676:51:183",
            "nodes": [],
            "functionSelector": "c4d66de8",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nameLocation": "1685:10:183",
            "parameters": {
              "id": 66541,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 66540,
                  "mutability": "mutable",
                  "name": "_stakingPool",
                  "nameLocation": "1704:12:183",
                  "nodeType": "VariableDeclaration",
                  "scope": 66543,
                  "src": "1696:20:183",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 66539,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1696:7:183",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1695:22:183"
            },
            "returnParameters": {
              "id": 66542,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1726:0:183"
            },
            "scope": 66564,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 66553,
            "nodeType": "FunctionDefinition",
            "src": "2244:104:183",
            "nodes": [],
            "documentation": {
              "id": 66544,
              "nodeType": "StructuredDocumentation",
              "src": "1941:300:183",
              "text": "@notice Swap RARE for a discounted price on tokens stored\n @param _tokenOut Address of the ERC20 to pay out with. If null address, then uses ETH.\n @param _minAmountOut Min amount one is willing to receive for the _rareIn.\n @param _rareIn The amount of RARE one is looking to trade."
            },
            "functionSelector": "94a5a29d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "rewardSwap",
            "nameLocation": "2253:10:183",
            "parameters": {
              "id": 66551,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 66546,
                  "mutability": "mutable",
                  "name": "_tokenOut",
                  "nameLocation": "2277:9:183",
                  "nodeType": "VariableDeclaration",
                  "scope": 66553,
                  "src": "2269:17:183",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 66545,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2269:7:183",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 66548,
                  "mutability": "mutable",
                  "name": "_minAmountOut",
                  "nameLocation": "2300:13:183",
                  "nodeType": "VariableDeclaration",
                  "scope": 66553,
                  "src": "2292:21:183",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 66547,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2292:7:183",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 66550,
                  "mutability": "mutable",
                  "name": "_rareIn",
                  "nameLocation": "2327:7:183",
                  "nodeType": "VariableDeclaration",
                  "scope": 66553,
                  "src": "2319:15:183",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 66549,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "2319:7:183",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2263:75:183"
            },
            "returnParameters": {
              "id": 66552,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2347:0:183"
            },
            "scope": 66564,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 66563,
            "nodeType": "FunctionDefinition",
            "src": "2842:101:183",
            "nodes": [],
            "documentation": {
              "id": 66554,
              "nodeType": "StructuredDocumentation",
              "src": "2561:278:183",
              "text": "@notice Estimate the discounted $RARE price for a given token.\n @param _tokenOut Address of the ERC20 token to be swapped for.\n @param _rareAmountIn uint128 amount of RARE to trade for the _tokenOut.\n @return uint256 amount of _tokenOut for the _rareAmountIn."
            },
            "functionSelector": "442471f0",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "estimateRarePrice",
            "nameLocation": "2851:17:183",
            "parameters": {
              "id": 66559,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 66556,
                  "mutability": "mutable",
                  "name": "_tokenOut",
                  "nameLocation": "2877:9:183",
                  "nodeType": "VariableDeclaration",
                  "scope": 66563,
                  "src": "2869:17:183",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 66555,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2869:7:183",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 66558,
                  "mutability": "mutable",
                  "name": "_rareAmountIn",
                  "nameLocation": "2896:13:183",
                  "nodeType": "VariableDeclaration",
                  "scope": 66563,
                  "src": "2888:21:183",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 66557,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "2888:7:183",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2868:42:183"
            },
            "returnParameters": {
              "id": 66562,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 66561,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 66563,
                  "src": "2934:7:183",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 66560,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2934:7:183",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2933:9:183"
            },
            "scope": 66564,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IRewardAccumulator",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 66510,
          "nodeType": "StructuredDocumentation",
          "src": "57:178:183",
          "text": "@author charlescrain\n @title IRewardAccumulator\n @notice The reward accumulator interface containing all functions, events, etc. for accumulating and swapping rewards."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [66564],
        "name": "IRewardAccumulator",
        "nameLocation": "245:18:183",
        "scope": 66565,
        "usedErrors": [66523, 66526, 66529, 66532, 66535, 66538]
      }
    ],
    "license": "MIT"
  },
  "id": 183
}
